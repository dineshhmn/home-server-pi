'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseGenerator = undefined;
exports.rewriteFile = rewriteFile;
exports.rewrite = rewrite;
exports.appSuffix = appSuffix;
exports.relativeRequire = relativeRequire;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _child_process = require('child_process');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _underscore = require('underscore.string');

var _underscore2 = _interopRequireDefault(_underscore);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _yeomanGenerator = require('yeoman-generator');

var _yeomanGenerator2 = _interopRequireDefault(_yeomanGenerator);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// extend lodash with underscore.string
_lodash2.default.mixin(_underscore2.default.exports());

/**
 * Run the given command in a child process
 * @param {string} cmd - command to run
 * @returns {Promise}
 */
function runCmd(cmd) {
  return new _bluebird2.default((resolve, reject) => {
    (0, _child_process.exec)(cmd, {}, function (err, stdout) {
      if (err) {
        console.error(stdout);
        return reject(err);
      }

      return resolve(stdout);
    });
  });
}

function appName(suffix) {
  let counter = 0;
  // Have to check this because of generator bug` #386
  process.argv.forEach(val => {
    if (val.indexOf('--app-suffix') > -1) {
      counter++;
    }
  });
  if (counter === 0 || typeof suffix === 'boolean' && suffix) {
    suffix = 'App';
  }
  return suffix ? _lodash2.default.upperFirst(_lodash2.default.camelCase(suffix)) : '';
}

function expandFiles(pattern, options) {
  options = options || {};
  var cwd = options.cwd || process.cwd();
  return _glob2.default.sync(pattern, options).filter(function (filepath) {
    return _fs2.default.statSync(_path2.default.join(cwd, filepath)).isFile();
  });
}

function rewriteFile(args) {
  args.path = args.path || process.cwd();
  var fullPath = _path2.default.join(args.path, args.file);

  args.haystack = _fs2.default.readFileSync(fullPath, 'utf8');
  var body = rewrite(args);

  _fs2.default.writeFileSync(fullPath, body);
}

function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}

function rewrite(args) {
  // check if splicable is already in the body text
  var re = new RegExp(args.splicable.map(function (line) {
    return '\s*' + escapeRegExp(line);
  }).join('\n'));

  if (re.test(args.haystack)) {
    return args.haystack;
  }

  var lines = args.haystack.split('\n');

  var otherwiseLineIndex = -1;
  lines.forEach(function (line, i) {
    if (line.indexOf(args.needle) !== -1) {
      otherwiseLineIndex = i;
    }
  });
  if (otherwiseLineIndex === -1) return lines.join('\n');

  var spaces = 0;
  while (lines[otherwiseLineIndex].charAt(spaces) === ' ') {
    spaces += 1;
  }

  var spaceStr = '';
  while ((spaces -= 1) >= 0) {
    spaceStr += ' ';
  }

  lines.splice(otherwiseLineIndex + 1, 0, args.splicable.map(function (line) {
    return spaceStr + line;
  }).join('\n'));

  return lines.join('\n');
}

function appSuffix(self) {
  var suffix = self.options['app-suffix'];
  return typeof suffix === 'string' ? _lodash2.default.classify(suffix) : '';
}

function relativeRequire(to, fr) {
  fr = this.destinationPath(fr || this.filePath);
  to = this.destinationPath(to);
  return _path2.default.relative(_path2.default.dirname(fr), to).replace(/\\/g, '/') // convert win32 separator to posix
  .replace(/^(?!\.\.)(.*)/, './$1') // prefix non parent path with ./
  .replace(/[\/\\]index\.js$/, ''); // strip index.js suffix from path
}

function filterFile(template) {
  // Find matches for parans
  var filterMatches = template.match(/\(([^)]+)\)/g);
  var filters = [];
  if (filterMatches) {
    filterMatches.forEach(function (filter) {
      filters.push(filter.replace('(', '').replace(')', ''));
      template = template.replace(filter, '');
    });
  }

  return { name: template, filters: filters };
}

function templateIsUsable(self, filteredFile) {
  var filters = self.filters || self.config.get('filters');
  var enabledFilters = [];
  for (var key in filters) {
    if (filters[key]) enabledFilters.push(key);
  }
  var matchedFilters = _lodash2.default.intersection(filteredFile.filters, enabledFilters);
  // check that all filters on file are matched
  if (filteredFile.filters.length && matchedFilters.length !== filteredFile.filters.length) {
    return false;
  }
  return true;
}

class BaseGenerator extends _yeomanGenerator2.default {
  constructor(args, opts) {
    // Calling the super constructor is important so our generator is correctly set up
    super(args, opts);

    this.argument('name', { type: String, required: false });

    this.name = this.options.name;

    // this.lodash = _;

    var yoCheckPromise;

    // CI won't have yo installed
    if (!process.env.CI) {
      yoCheckPromise = runCmd('yo --version').then(stdout => {
        if (!_semver2.default.satisfies(_semver2.default.clean(stdout), '>= 1.7.1')) {
          throw new Error('ERROR: You need to update yo to at least 1.7.1 (npm i -g yo)');
        }
      });
    } else {
      yoCheckPromise = _bluebird2.default.resolve();
    }

    this.appname = _lodash2.default.slugify(_lodash2.default.humanize(_path2.default.basename(process.cwd())));
    this.scriptAppName = this.config.get('moduleName') || _lodash2.default.camelize(this.appname) + appName(this.options['app-suffix']);

    this.cameledName = _lodash2.default.camelize(this.name);
    this.classedName = _lodash2.default.classify(this.name);
    this.kebabName = _lodash2.default.kebabCase(this.name);

    this.filters = this.config.get('filters');
    this.extensions = this.config.get('extensions');

    this.scriptExt = this.hasExtension('ts') ? 'ts' : 'js';
    this.templateExt = this.hasExtension('pug') ? 'pug' : 'html';
    this.styleExt = this.hasExtension('sass') ? 'scss' : this.hasExtension('less') ? 'less' : this.hasExtension('stylus') ? 'styl' : 'css';

    // dynamic assertion statements
    this.expect = () => this.hasFilter('expect') ? 'expect(' : '';
    this.to = () => this.hasFilter('expect') ? ').to' : '.should';

    if (typeof this.env.options.appPath === 'undefined') {
      try {
        this.env.options.appPath = require(_path2.default.join(process.cwd(), 'bower.json')).appPath;
      } catch (err) {}
      this.env.options.appPath = this.env.options.appPath || 'app';
    }

    this.sourceRoot(_path2.default.join(__dirname, '..', '/templates'));

    // return yoCheckPromise;
  }

  hasFilter(filter) {
    return this.filters.indexOf(filter) !== -1;
  }
  hasExtension(ext) {
    return this.extensions.indexOf(ext) !== -1;
  }

  /**
   * Copy templates from `source` to `destination` whily applying name transformations
   */
  processDirectory(source, destination) {
    const root = _path2.default.isAbsolute(source) ? source : _path2.default.join(this.sourceRoot(), source);
    const files = expandFiles('**', { dot: true, cwd: root });

    for (const file of files) {
      var filteredFile = filterFile(file);

      if (this.basename) {
        filteredFile.name = filteredFile.name.replace('basename', this.basename);
      }

      if (this.name) {
        filteredFile.name = filteredFile.name.replace('name', this.name);
      }

      const name = filteredFile.name;
      let copy = false;
      let stripped;

      let src = _path2.default.join(root, file);
      let dest = _path2.default.join(destination, name);

      if (this.filters.ts && dest.indexOf('client') > -1 && dest.indexOf('.json') === -1) {
        dest = dest.replace('.js', '.ts');
      }

      if (_path2.default.basename(dest).indexOf('_') === 0) {
        stripped = _path2.default.basename(dest).replace(/^_/, '');
        dest = _path2.default.join(_path2.default.dirname(dest), stripped);
      }

      if (_path2.default.basename(dest).indexOf('!') === 0) {
        stripped = _path2.default.basename(dest).replace(/^!/, '');
        dest = _path2.default.join(_path2.default.dirname(dest), stripped);
        copy = true;
      }

      if (templateIsUsable(this, filteredFile)) {
        if (copy) {
          this.fs.copy(src, dest);
        } else {
          this.filePath = dest;
          this.fs.copyTpl(src, dest, this);
          delete this.filePath;
        }
      }
    }
  }
}
exports.BaseGenerator = BaseGenerator;