'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.addModule = addModule;

var _jscodeshift = require('jscodeshift');

var _jscodeshift2 = _interopRequireDefault(_jscodeshift);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const moduleName = 'Test1Module';
const modulePath = './test0/test1.module';

class NoModulesError extends Error {
    constructor() {
        super(`No NgModules found in app module.
  Are you sure you have the correct path registered in 'appModulePath'?`);
    }
}
class TooManyModulesError extends Error {
    constructor() {
        super(`More than one NgModule found in app module.
  There should be only one.`);
    }
}

/**
 * @param {string} source
 * @param {string} moduleName - ex 'MyModule'
 * @param {string} modulePath - module path relative to appModulePath, ex './thing/my.module'
 */
function addModule(sourceText, moduleName, modulePath) {
    const source = _jscodeshift2.default.withParser('flow')(sourceText);

    const ngModules = source.find(_jscodeshift2.default.ClassDeclaration, path => path.decorators.some(decorator => decorator.callee.name === 'NgModule'));

    if (ngModules.size() === 0) {
        throw new NoModulesError();
    }
    if (ngModules.size() > 1) {
        throw new TooManyModulesError();
    }

    const ngModuleClass = ngModules.get();
    const ngModule = ngModuleClass.value.decorators.find(decorator => decorator.callee.name === 'NgModule');
    const imports = ngModule.arguments[0].properties.find(prop => prop.key.name === 'imports');

    if (!imports) {
        console.info('No \'imports\' property? Strange..');
        // TODO: create
    }

    // Push module to `imports` array
    const MyModuleIdentifier = _jscodeshift2.default.identifier(moduleName);
    imports.value.elements.push(MyModuleIdentifier);

    const existingImports = source.find(_jscodeshift.ImportSpecifier);
    if (existingImports.size() === 0) {
        // TODO: Must be using some other module format
    }

    const MyModuleImport = _jscodeshift2.default.importDeclaration([_jscodeshift2.default.importSpecifier(_jscodeshift2.default.identifier(moduleName))], _jscodeshift2.default.literal(modulePath));

    // Insert after last `import {...} from '...'` statement
    (0, _jscodeshift2.default)(existingImports.at(-1).get().parent.insertAfter(MyModuleImport));

    return source.toSource({ quote: 'single' });
}