'use strict';

var _gulpFilter = require('gulp-filter');

var _gulpFilter2 = _interopRequireDefault(_gulpFilter);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _jscodeshift = require('jscodeshift');

var _jscodeshift2 = _interopRequireDefault(_jscodeshift);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _gulpTap = require('gulp-tap');

var _gulpTap2 = _interopRequireDefault(_gulpTap);

var _base = require('../base');

var _moduleTransform = require('./module-transform');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function readFile(path) {
  return new Promise((resolve, reject) => {
    _fs2.default.readFile(path, 'utf8', (err, data) => {
      if (err) return reject(err);

      resolve(data);
    });
  });
}

function writeFile(path, source) {
  return new Promise((resolve, reject) => {
    _fs2.default.writeFile(path, source, err => {
      if (err) return reject(err);

      resolve();
    });
  });
}

class Generator extends _base.BaseGenerator {
  prompting() {
    var prompts = [{
      name: 'dir',
      message: 'Where would you like to create this route?',
      default: this.config.get('routeDirectory')
    }, {
      name: 'route',
      message: 'What will the url of your route be?',
      default: `${this.name}`
    }];

    return this.prompt(prompts).then(props => {
      this.route = props.route;
      this.dir = _path2.default.join(props.dir, this.name);
    });
  }

  writing() {
    var _this = this;

    return _asyncToGenerator(function* () {
      _this.sourceRoot(_path2.default.join(__dirname, '../../templates/route'));
      _this.processDirectory('.', _this.dir);

      const appModulePath = _this.config.get('appModulePath');

      const appModuleFolder = appModulePath.substring(0, appModulePath.lastIndexOf('/'));
      const newModuleFilePath = _path2.default.normalize(`${_this.dir}/${_this.name}.module`);

      const relativeModulePath = `./${_path2.default.normalize(_path2.default.relative(appModuleFolder, newModuleFilePath))}`.replace(/\\/g, '/');

      let source = yield readFile(appModulePath);

      source = (0, _moduleTransform.addModule)(source, `${_this.classedName}Module`, relativeModulePath);

      // FIXME: Bug in jscodeshift/recast removing `@` from modified `NgModule` decorator
      source = source.replace(/\nNgModule/, '\n@NgModule');

      yield writeFile(appModulePath, source);
    })();
  }
}

module.exports = Generator;