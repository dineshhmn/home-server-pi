'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NamedBase = exports.Base = undefined;
exports.genBase = genBase;
exports.genNamedBase = genNamedBase;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _underscore = require('underscore.string');

var _underscore2 = _interopRequireDefault(_underscore);

var _yeomanGenerator = require('yeoman-generator');

var _yeomanGenerator2 = _interopRequireDefault(_yeomanGenerator);

var _yeomanWelcome = require('yeoman-welcome');

var _yeomanWelcome2 = _interopRequireDefault(_yeomanWelcome);

var _util = require('./util');

var genUtils = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// extend lodash with underscore.string
_lodash2.default.mixin(_underscore2.default.exports());

class Base extends _yeomanGenerator2.default {
  constructor(...args) {
    super(...args);

    this.lodash = _lodash2.default;
    this.yoWelcome = _yeomanWelcome2.default;

    this.appname = _lodash2.default.camelize(_lodash2.default.slugify(_lodash2.default.humanize(this.determineAppname())));

    this.scriptAppName = this.appname + this.appSuffix();

    this.filters = this.filters || this.config.get('filters');

    // dynamic relative require path
    this.relativeRequire = genUtils.relativeRequire.bind(this);
    // process template directory
    this.processDirectory = genUtils.processDirectory.bind(this);
    // rewrite a file in place
    this.rewriteFile = genUtils.rewriteFile;
  }

  appSuffix() {
    var suffix = this.options['app-suffix'];
    return typeof suffix === 'string' ? this.lodash.classify(suffix) : '';
  }

  determineAppname() {
    if (this.options.name) return this.options.name;else return super.determineAppname();
  }

  // dynamic assertion statements
  expect() {
    return this.filters.expect ? 'expect(' : '';
  }
  to() {
    return this.filters.expect ? ').to' : '.should';
  }

  public() {
    return this.filters.ts ? 'public ' : '';
  }
  private() {
    return this.filters.ts ? 'private ' : '';
  }
}

exports.Base = Base;
class NamedBase extends Base {
  constructor(...args) {
    super(...args);

    this.argument('name', { type: String, required: true });

    var name = this.options.name.replace(/\//g, '-');

    this.cameledName = _lodash2.default.camelize(name);
    this.classedName = _lodash2.default.classify(name);

    this.basename = _path2.default.basename(this.options.name);
    this.dirname = this.options.name.includes('/') ? _path2.default.dirname(this.options.name) : this.options.name;
  }
}

exports.NamedBase = NamedBase;
function genBase(self) {
  self = self || this;

  self.lodash = _lodash2.default;
  self.yoWelcome = _yeomanWelcome2.default;

  let baseDetermineAppname = self.determineAppname.bind(self);
  self.determineAppname = () => {
    if (self['name']) {
      return self['name'];
    } else {
      return baseDetermineAppname();
    }
  };

  self.appname = _lodash2.default.camelize(_lodash2.default.slugify(_lodash2.default.humanize(self.determineAppname())));
  self.scriptAppName = self.appname + genUtils.appSuffix(self);

  self.filters = self.filters || self.config.get('filters');

  // dynamic assertion statements
  self.expect = function () {
    return self.filters.expect ? 'expect(' : '';
  };
  self.to = function () {
    return self.filters.expect ? ').to' : '.should';
  };

  // dynamic relative require path
  self.relativeRequire = genUtils.relativeRequire.bind(self);
  // process template directory
  self.processDirectory = genUtils.processDirectory.bind(self);
  // rewrite a file in place
  self.rewriteFile = genUtils.rewriteFile;

  return Promise.resolve();
}

function genNamedBase(self) {
  self = self || this;

  // extend genBase
  return genBase(self).then(() => {
    var name = self.name.replace(/\//g, '-');

    self.cameledName = _lodash2.default.camelize(name);
    self.classedName = _lodash2.default.classify(name);

    self.basename = _path2.default.basename(self.name);
    self.dirname = self.name.indexOf('/') >= 0 ? _path2.default.dirname(self.name) : self.name;
  });
}